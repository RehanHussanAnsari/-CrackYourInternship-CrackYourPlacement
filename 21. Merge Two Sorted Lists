/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

static void addNode(ListNode* &trackH, int data){
    ListNode* temp = new ListNode(data);
    trackH->next = temp;
    trackH = temp;
}
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1==NULL && list2 == NULL) return list1;
        if(list1 == NULL) return list2;
        if(list2 == NULL) return list1;

        ListNode* newH = new ListNode(0);
        ListNode* trackH = newH;
        ListNode* temp1 = list1;
        ListNode* temp2 = list2;

        while(temp1!=NULL && temp2!=NULL){
            if(temp1->val == temp2->val){
                addNode(trackH,temp1->val);
                addNode(trackH,temp2->val);
                temp1 = temp1->next;
                temp2 = temp2->next;
                // cout<<temp1->val<<" "<<temp2->val<<endl;
            }
            else if(temp1->val<temp2->val){
                addNode(trackH,temp1->val);
                temp1 = temp1->next;
            }
            else if(temp1->val>temp2->val){
                addNode(trackH,temp2->val);
                temp2 = temp2->next;
            }
            
        }

        while(temp2!=NULL){
            addNode(trackH, temp2->val);
            temp2 = temp2->next;
        }
        while(temp1!=NULL){
            addNode(trackH, temp1->val);
            temp1 = temp1->next;
        }
        newH = newH->next;
        return newH;
    }
};
